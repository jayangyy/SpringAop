<b:beans xmlns="http://www.springframework.org/schema/security"
         xmlns:b="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
    <http />
    <!--    <user-service>
        <user name="user" password="password" authorities="ROLE_USER" />
    </user-service>-->
    <!-- 指定一个自定义的authentication-manager :customUserDetailsService -->
    <!--	<security:authentication-manager>
            <security:authentication-provider user-service-ref="customUserDetailsService">
                            <security:password-encoder ref="passwordEncoder"/>
            </security:authentication-provider>
    </security:authentication-manager>-->
	
    <!-- 对密码进行MD5编码 -->
    <!--<b:bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>-->

    <!-- 
           通过 customUserDetailsService,Spring会自动的用户的访问级别.
           也可以理解成:以后我们和数据库操作就是通过customUserDetailsService来进行关联.
    -->
    <!--<b:bean id="customUserDetailsService" class="org.liukai.tutorial.service.CustomUserDetailsService"/>-->
    <!-- 不要过滤图片等静态资源，其中**代表可以跨越目录，*不可以跨越目录。 -->
    <!-- <http pattern="/**/*.jpg" security="none" />
    <http pattern="/**/*.png" security="none" />
    <http pattern="/**/*.gif" security="none" />
    <http pattern="/**/*.css" security="none" />
    <http pattern="/**/*.js" security="none" /> -->
    <!--<http pattern="/login.jsp" security="none" />-->
    <!-- <http pattern="index.html" security="none"/> -->
    <!--<http pattern="/jsp/forgotpassword.jsp" security="none" />-->

    <!--<http auto-config="true" access-denied-page="/accessDenied.jsp">-->
  
  
    <!--<form-login login-page="/login.jsp"  authentication-failure-url="/login.jsp?error=true"  />-->

    <!-- "记住我"功能，采用持久化策略（将用户的登录信息存放在数据库表中） -->
    <!--<remember-me data-source-ref="dataSource" />-->
  
    <!-- 检测失效的sessionId,超时时定位到另外一个URL -->
    <!--<session-management invalid-session-url="/sessionTimeout.jsp" />-->
  
    <!--<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/>--> 
  
    <!--</http>-->

    <!-- 一个自定义的filter，必须包含authenticationManager,
    accessDecisionManager,securityMetadataSource三个属性。  -->
    <!--    <b:bean id="myFilter" 
            class="com.springmvc.security.MyFilterSecurityInterceptor">
        <b:property name="authenticationManager" 
                    ref="authenticationManager"/>
        <b:property name="accessDecisionManager" 
                    ref="myAccessDecisionManager"/>
        <b:property name="securityMetadataSource" 
                    ref="mySecurityMetadataSource"/>
    </b:bean>-->
 
    <!-- 注意能够为authentication-manager 设置alias别名  -->
    <!--    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="userDetailsManager">
              <password-encoder ref="passwordEncoder">
             <salt-source user-property="username" />
            </password-encoder> 
        </authentication-provider>
    </authentication-manager>-->
 

    <!--   事件监听:实现了 ApplicationListener监听接口，包括AuthenticationCredentialsNotFoundEvent 事件，
    AuthorizationFailureEvent事件，AuthorizedEvent事件， PublicInvocationEvent事件 -->
    <!--<b:bean  class="org.springframework.security.authentication.event.LoggerListener" />-->

 
    <!-- 用户详细信息管理：数据源、用户缓存（通过数据库管理用户、角色、权限、资源）。 -->
    <!--<b:bean id="userDetailsManager" class="com.springmvc.security.MyUserDetailsService"/>-->  
 
    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源。 -->
    <!--    <b:bean id="myAccessDecisionManager"
            class="com.springmvc.security.MyAccessDecisionManager">
    </b:bean>  -->


    <!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色去访问。 -->
    <!--    <b:bean id="mySecurityMetadataSource"
            class="com.springmvc.security.MyInvocationSecurityMetadataSourceService">
        <b:constructor-arg ref="testDao"/>
    </b:bean> -->
    <!-- 指定一个自定义的authentication-manager :customUserDetailsService -->
    <authentication-manager>
        <authentication-provider user-service-ref="customUserDetailsService">
            <password-encoder ref="passwordEncoder">
                <salt-source user-property="username" />
            </password-encoder> 
        </authentication-provider>
    </authentication-manager>
    <!-- 对密码进行MD5编码 -->
    <b:bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

    <!-- 
           通过 customUserDetailsService,Spring会自动的用户的访问级别.
           也可以理解成:以后我们和数据库操作就是通过customUserDetailsService来进行关联.
    -->
    <b:bean id="customUserDetailsService" class="cr.cdrb.web.edu.security.EduUserDetailsService"/>

</b:beans>